"""
Django settings for project.
Generated by 'django-admin startproject' using Django 4.2.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
from decouple import Csv
from datetime import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# ~/<virtualenv-folder>/
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

APP_NAME ='Psinergy.Link'

# SECURITY WARNING: Keep the secret key used in production secret!
# SECURITY WARNING: Don't run with debug turned on in production!

if config('PRODUCTION', default=False, cast=bool) == True:
    DEBUG = False
    SECRET_KEY = config('PROD_SECRET_KEY')
    SECRET_KEY_FALLBACK = config('PROD_SECRET_KEY_FALLBACK')
    ALLOWED_HOSTS = config('PROD_ALLOWED_HOSTS', cast=Csv())
    ## Security
    SECURE_SSL_HOST = config('SECURE_SSL_HOST')
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
    SECURE_REFERRER_POLICY = config('SECURE_REFERRER_POLICY')
    SECURE_HSTS_SECONDS = int(config('SECURE_HSTS_SECONDS'))  # 31536000
    SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=False, cast=bool)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=False, cast=bool)
    SECURE_CROSS_ORIGIN_OPENER_POLICY = config('SECURE_CROSS_ORIGIN_OPENER_POLICY')
    SECURE_CONTENT_TYPE_NOSNIFF = config('SECURE_CONTENT_TYPE_NOSNIFF', default=True, cast=bool)
    X_FRAME_OPTIONS = config('X_FRAME_OPTIONS')

    ## Cookies
    CSRF_USE_SESSIONS = config('CSRF_USE_SESSIONS', default=False, cast=bool)
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
    CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', cast=Csv())
    CSRF_COOKIE_DOMAIN = config('CSRF_COOKIE_DOMAIN')
    CSRF_COOKIE_PATH = '/'

    ## Session
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
    SESSION_COOKIE_AGE = int(config('SESSION_COOKIE_AGE'))
    SESSION_COOKIE_NAME = config('SESSION_COOKIE_NAME')
    SESSION_COOKIE_DOMAIN = config('SESSION_COOKIE_DOMAIN')
    SESSION_COOKIE_SAMESITE = config('SESSION_COOKIE_SAMESITE')

    ## Proxy Use Only
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # USE_X_FORWARDED_HOST = False

    # Stripe Payments
    STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
    STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET')

else:
    DEBUG = True
    SECRET_KEY = config('DEBUG_SECRET_KEY')
    ALLOWED_HOSTS = config('DEBUG_ALLOWED_HOSTS', cast=Csv())


### EMAIL

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'email-host.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'email@example.com'
# EMAIL_HOST_PASSWORD = 'email-password'


### USER AUTHENTICATION

SITE_ID = int(config('SITE_ID'))
AUTH_USER_MODEL = 'custom_auth.User'
ACCOUNT_ACTIVATION_DAYS = None
REGISTRATION_OPEN = config('REGISTRATION_OPEN', default=False, cast=bool)
LOGIN_REDIRECT_URL = '/my_links/'
LOGOUT_REDIRECT_URL = '/'
AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',)


### ADMIN HONEYPOT
# pip install django-admin-honeypot-updated-2021
ADMIN_HONEYPOT_EMAIL_ADMINS = False


### APPLICATIONS

INSTALLED_APPS = [
    
    # Custom User Model
    'custom_auth',

    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'django.contrib.admindocs',
    'django.contrib.sites',

    # Third-party
    'django_registration',
    'admin_honeypot',
    'crispy_forms',
    'crispy_bootstrap5',
    'taggit',
    
    # Project
    'shortener',
    'core',
    'home',
    #'news',
    #'subscriptions',

]


MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware', # First
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 'django.middleware.cache.FetchFromCacheMiddleware', # Last
]

ROOT_URLCONF = 'psinergy.urls'


### TEMPLATES

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates", os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'psinergy.wsgi.application'


### DATABASE
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
        'CONN_MAX_AGE': 600,
        'TIME_ZONE': 'UTC',
    }
}


### Password Validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]


### INTERNATIONALIZATION
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
USE_I18N = True
USE_THOUSAND_SEPARATOR = True
THOUSAND_SEPARATOR = ','

### TIME ZONE
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE = 'UTC'
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if config('PRODUCTION', default=False, cast=bool) == True:
    LOCAL_STATIC_CDN = os.path.join(os.path.dirname(BASE_DIR), 'static_cdn')
    STATIC_URL = '/static/'
else:
    LOCAL_STATIC_CDN = os.path.join(os.path.dirname(BASE_DIR), 'static_cdn')
    STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(LOCAL_STATIC_CDN, 'static')

STATICFILES_DIRS = [
   os.path.join(BASE_DIR, 'static_files')
]


### Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


### FORMS
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'


### TAGGIT
TAGGIT_CASE_INSENSITIVE = True


### LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 'filters': {
    #     'require_debug_false': {
    #         '()': 'django.utils.log.RequireDebugFalse',
    #     },
    # },
    'formatters': {
        'verbose': {
            #'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        # 'file': {
        #     'class': 'logging.FileHandler',
        #     'filename': '/home/ubuntu/django.log',
        #     'formatter': 'verbose',
        # },
        'console': {
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
            'formatter': 'verbose',
        },
        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['require_debug_false'],
        # },
    },
    'loggers': {
        'django': {
            #'handlers': ['file', 'console'],
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
#    'root': {
#        #'handlers': ['file', 'console'],
#        'handlers': ['console'],
#        'level': 'INFO',
#    },
}


### SESSIONS
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db' # Hybrid: DB + Cache
SESSION_CACHE_ALIAS = config('SESSION_CACHE_ALIAS')


### CACHING
# CACHE_MIDDLEWARE_ALIAS  = 'redis_cache'
# CACHE_MIDDLEWARE_SECONDS = 600
# CACHE_MIDDLEWARE_KEY_PREFIX = 'shortener'  # name of site if multiple sites are used


# Memcached
# CACHES = {
#    'default': {
#        #'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#        #'LOCATION': 'django-local-cache',
#        # /etc/memcached.conf - customize settings like memory allocation, maximum connections, and logging.
#        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
#        'LOCATION': ['127.0.0.1:11211'],
#    },
# }

### REDIS Server(s)
REDIS_LOCATION = config('REDIS_LOCATION', cast=Csv())

### CACHING
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_LOCATION,
        'KEY_PREFIX': 'default',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 200,
                'retry_on_timeout': True,
            }
        }
    },
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_LOCATION,
        'KEY_PREFIX': 'session',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 200,
                'retry_on_timeout': True,
            }
        }
    },
}

# CACHES = {
    # 'default': {
    #     'BACKEND': 'django.core.cache.backends.redis.RedisCache',
    #     'LOCATION': REDIS_LOCATION,
    # },
    # 'session': {
    #     'BACKEND': 'django.core.cache.backends.redis.RedisCache',
    #     'LOCATION': REDIS_LOCATION,
    #     'KEY_PREFIX': 'session'
    # },
    
    # 'celery': {
    #     'BACKEND': 'django.core.cache.backends.redis.RedisCache',
    #     'LOCATION': REDIS_LOCATION,
    #     'KEY_PREFIX': 'celery'
    # },
# }


### CELERY
# from celery.schedules import crontab

# EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
# CELERY_EMAIL_TASK_CONFIG = {
#     "queue": "short_tasks",
# }

# CELERY_BROKER_URL = REDIS_LOCATION
# CELERY_RESULT_BACKEND = REDIS_LOCATION
# CELERY_ACCEPT_CONTENT = ["application/json"]
# CELERY_TASK_SERIALIZER = "json"
# CELERY_RESULT_SERIALIZER = "json"
# CELERY_TIMEZONE = TIME_ZONE
# CELERY_SOFT_TIME_LIMIT = 2 * 60 * 60
# CELERY_WORKER_PREFETCH_MULTIPLIER = 1
# CELERYD_PREFETCH_MULTIPLIER = 1

# CELERY_BEAT_SCHEDULE = {
#     # Clear expired sessions, every sunday 1:01am 
#     # By default Django has 2 week expire date
#     "clear_sessions": {
#         "task": "clear_sessions",
#         "schedule": crontab(hour=1, minute=1, day_of_week=6),
#     },
#     "get_list_of_popular_media": {
#         "task": "get_list_of_popular_media",
#         "schedule": crontab(minute=1, hour="*/10"),
#     },
#     "update_listings_thumbnails": {
#         "task": "update_listings_thumbnails",
#         "schedule": crontab(minute=2, hour="*/30"),
#     },
# }

# CELERY_TASK_ALWAYS_EAGER = False
# if os.environ.get("TESTING"):
#     CELERY_TASK_ALWAYS_EAGER = True


if DEBUG:
    import mimetypes
    mimetypes.add_type('application/javascript', '.js', True)

    INTERNAL_IPS = ALLOWED_HOSTS

    INSTALLED_APPS += (
        'debug_toolbar',
    )

    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    
    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }

    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,  # Show toolbar only if DEBUG is True
        "RESULTS_CACHE_SIZE": 100,
    }

    DEBUG_TOOLBAR_PANELS = [
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.logging.LoggingPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
    ]
